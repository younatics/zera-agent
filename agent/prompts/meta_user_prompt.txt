# TASK ANALYSIS & PROMPT OPTIMIZATION

Your task is to analyze the provided information and generate optimized SYSTEM_PROMPT and USER_PROMPT pairs.

## 1. TASK DEFINITION & ANALYSIS
Begin by thoroughly analyzing the evaluation snapshots below. These cases represent examples of prompt performance:

{random_cases}

From these cases and the recent prompt history below, identify and document:
- The fundamental task type and its core requirements
- Patterns that consistently lead to high-quality outputs
- Common failure modes and their root causes
- Effective response structures and formats
- Key differences between successful and unsuccessful cases
- Evolution of prompt effectiveness over time
- Consistent success patterns from the prompt history
- Areas needing improvement based on historical performance

Current Task Type: {task_type}
Current Task Description: {task_description}

Recent prompt history:
{recent_prompts}

Use these insights to form a clear understanding of what makes prompts effective for this specific task.

## 2. CURRENT STATE
Current prompts to improve:
System: {system_prompt}
User: {user_prompt}

Best Performing Prompt:
{formatted_best_prompt}

## 3. OPTIMIZATION REQUIREMENTS
Based on your analysis, create new prompts that:
- Address identified success factors
- Mitigate common failure patterns
- Maintain or improve upon the best performing prompt's strengths
- Generalize effective patterns for broader applicability
- Ensure clear alignment between instructions and expected outputs

## OUTPUT FORMAT
TASK_TYPE:
[Define the task type]

TASK_DESCRIPTION:
[Detailed description of the task]

SYSTEM_PROMPT:
[Your improved system prompt]

USER_PROMPT:
[Your improved user prompt]